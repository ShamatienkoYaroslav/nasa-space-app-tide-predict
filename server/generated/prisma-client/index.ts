// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  extreme: (where?: ExtremeWhereInput) => Promise<boolean>;
  station: (where?: StationWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  extreme: (where: ExtremeWhereUniqueInput) => ExtremeNullablePromise;
  extremes: (args?: {
    where?: ExtremeWhereInput;
    orderBy?: ExtremeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Extreme>;
  extremesConnection: (args?: {
    where?: ExtremeWhereInput;
    orderBy?: ExtremeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExtremeConnectionPromise;
  station: (where: StationWhereUniqueInput) => StationNullablePromise;
  stations: (args?: {
    where?: StationWhereInput;
    orderBy?: StationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Station>;
  stationsConnection: (args?: {
    where?: StationWhereInput;
    orderBy?: StationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StationConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createExtreme: (data: ExtremeCreateInput) => ExtremePromise;
  updateExtreme: (args: {
    data: ExtremeUpdateInput;
    where: ExtremeWhereUniqueInput;
  }) => ExtremePromise;
  updateManyExtremes: (args: {
    data: ExtremeUpdateManyMutationInput;
    where?: ExtremeWhereInput;
  }) => BatchPayloadPromise;
  upsertExtreme: (args: {
    where: ExtremeWhereUniqueInput;
    create: ExtremeCreateInput;
    update: ExtremeUpdateInput;
  }) => ExtremePromise;
  deleteExtreme: (where: ExtremeWhereUniqueInput) => ExtremePromise;
  deleteManyExtremes: (where?: ExtremeWhereInput) => BatchPayloadPromise;
  createStation: (data: StationCreateInput) => StationPromise;
  updateStation: (args: {
    data: StationUpdateInput;
    where: StationWhereUniqueInput;
  }) => StationPromise;
  updateManyStations: (args: {
    data: StationUpdateManyMutationInput;
    where?: StationWhereInput;
  }) => BatchPayloadPromise;
  upsertStation: (args: {
    where: StationWhereUniqueInput;
    create: StationCreateInput;
    update: StationUpdateInput;
  }) => StationPromise;
  deleteStation: (where: StationWhereUniqueInput) => StationPromise;
  deleteManyStations: (where?: StationWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  extreme: (
    where?: ExtremeSubscriptionWhereInput
  ) => ExtremeSubscriptionPayloadSubscription;
  station: (
    where?: StationSubscriptionWhereInput
  ) => StationSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ExtremeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "dt_ASC"
  | "dt_DESC"
  | "height_ASC"
  | "height_DESC"
  | "type_ASC"
  | "type_DESC";

export type StationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "wtId_ASC"
  | "wtId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ExtremeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ExtremeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  dt?: Maybe<DateTimeInput>;
  dt_not?: Maybe<DateTimeInput>;
  dt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dt_lt?: Maybe<DateTimeInput>;
  dt_lte?: Maybe<DateTimeInput>;
  dt_gt?: Maybe<DateTimeInput>;
  dt_gte?: Maybe<DateTimeInput>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<ExtremeWhereInput[] | ExtremeWhereInput>;
  OR?: Maybe<ExtremeWhereInput[] | ExtremeWhereInput>;
  NOT?: Maybe<ExtremeWhereInput[] | ExtremeWhereInput>;
}

export type StationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  wtId?: Maybe<String>;
}>;

export interface StationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  wtId?: Maybe<String>;
  wtId_not?: Maybe<String>;
  wtId_in?: Maybe<String[] | String>;
  wtId_not_in?: Maybe<String[] | String>;
  wtId_lt?: Maybe<String>;
  wtId_lte?: Maybe<String>;
  wtId_gt?: Maybe<String>;
  wtId_gte?: Maybe<String>;
  wtId_contains?: Maybe<String>;
  wtId_not_contains?: Maybe<String>;
  wtId_starts_with?: Maybe<String>;
  wtId_not_starts_with?: Maybe<String>;
  wtId_ends_with?: Maybe<String>;
  wtId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  AND?: Maybe<StationWhereInput[] | StationWhereInput>;
  OR?: Maybe<StationWhereInput[] | StationWhereInput>;
  NOT?: Maybe<StationWhereInput[] | StationWhereInput>;
}

export interface ExtremeCreateInput {
  id?: Maybe<ID_Input>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  dt: DateTimeInput;
  height?: Maybe<Float>;
  type?: Maybe<String>;
}

export interface ExtremeUpdateInput {
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  dt?: Maybe<DateTimeInput>;
  height?: Maybe<Float>;
  type?: Maybe<String>;
}

export interface ExtremeUpdateManyMutationInput {
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  dt?: Maybe<DateTimeInput>;
  height?: Maybe<Float>;
  type?: Maybe<String>;
}

export interface StationCreateInput {
  id?: Maybe<ID_Input>;
  wtId: String;
  name: String;
  lat: Float;
  lng: Float;
}

export interface StationUpdateInput {
  wtId?: Maybe<String>;
  name?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface StationUpdateManyMutationInput {
  wtId?: Maybe<String>;
  name?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface ExtremeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExtremeWhereInput>;
  AND?: Maybe<ExtremeSubscriptionWhereInput[] | ExtremeSubscriptionWhereInput>;
  OR?: Maybe<ExtremeSubscriptionWhereInput[] | ExtremeSubscriptionWhereInput>;
  NOT?: Maybe<ExtremeSubscriptionWhereInput[] | ExtremeSubscriptionWhereInput>;
}

export interface StationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StationWhereInput>;
  AND?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
  OR?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
  NOT?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Extreme {
  id: ID_Output;
  lat: Float;
  lng: Float;
  dt: DateTimeOutput;
  height?: Float;
  type?: String;
}

export interface ExtremePromise extends Promise<Extreme>, Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  dt: () => Promise<DateTimeOutput>;
  height: () => Promise<Float>;
  type: () => Promise<String>;
}

export interface ExtremeSubscription
  extends Promise<AsyncIterator<Extreme>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  dt: () => Promise<AsyncIterator<DateTimeOutput>>;
  height: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface ExtremeNullablePromise
  extends Promise<Extreme | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  dt: () => Promise<DateTimeOutput>;
  height: () => Promise<Float>;
  type: () => Promise<String>;
}

export interface ExtremeConnection {
  pageInfo: PageInfo;
  edges: ExtremeEdge[];
}

export interface ExtremeConnectionPromise
  extends Promise<ExtremeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExtremeEdge>>() => T;
  aggregate: <T = AggregateExtremePromise>() => T;
}

export interface ExtremeConnectionSubscription
  extends Promise<AsyncIterator<ExtremeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExtremeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExtremeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ExtremeEdge {
  node: Extreme;
  cursor: String;
}

export interface ExtremeEdgePromise extends Promise<ExtremeEdge>, Fragmentable {
  node: <T = ExtremePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExtremeEdgeSubscription
  extends Promise<AsyncIterator<ExtremeEdge>>,
    Fragmentable {
  node: <T = ExtremeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExtreme {
  count: Int;
}

export interface AggregateExtremePromise
  extends Promise<AggregateExtreme>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExtremeSubscription
  extends Promise<AsyncIterator<AggregateExtreme>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Station {
  id: ID_Output;
  wtId: String;
  name: String;
  lat: Float;
  lng: Float;
}

export interface StationPromise extends Promise<Station>, Fragmentable {
  id: () => Promise<ID_Output>;
  wtId: () => Promise<String>;
  name: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface StationSubscription
  extends Promise<AsyncIterator<Station>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wtId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

export interface StationNullablePromise
  extends Promise<Station | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  wtId: () => Promise<String>;
  name: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface StationConnection {
  pageInfo: PageInfo;
  edges: StationEdge[];
}

export interface StationConnectionPromise
  extends Promise<StationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StationEdge>>() => T;
  aggregate: <T = AggregateStationPromise>() => T;
}

export interface StationConnectionSubscription
  extends Promise<AsyncIterator<StationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStationSubscription>() => T;
}

export interface StationEdge {
  node: Station;
  cursor: String;
}

export interface StationEdgePromise extends Promise<StationEdge>, Fragmentable {
  node: <T = StationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StationEdgeSubscription
  extends Promise<AsyncIterator<StationEdge>>,
    Fragmentable {
  node: <T = StationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStation {
  count: Int;
}

export interface AggregateStationPromise
  extends Promise<AggregateStation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStationSubscription
  extends Promise<AsyncIterator<AggregateStation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ExtremeSubscriptionPayload {
  mutation: MutationType;
  node: Extreme;
  updatedFields: String[];
  previousValues: ExtremePreviousValues;
}

export interface ExtremeSubscriptionPayloadPromise
  extends Promise<ExtremeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExtremePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExtremePreviousValuesPromise>() => T;
}

export interface ExtremeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExtremeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExtremeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExtremePreviousValuesSubscription>() => T;
}

export interface ExtremePreviousValues {
  id: ID_Output;
  lat: Float;
  lng: Float;
  dt: DateTimeOutput;
  height?: Float;
  type?: String;
}

export interface ExtremePreviousValuesPromise
  extends Promise<ExtremePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  dt: () => Promise<DateTimeOutput>;
  height: () => Promise<Float>;
  type: () => Promise<String>;
}

export interface ExtremePreviousValuesSubscription
  extends Promise<AsyncIterator<ExtremePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  dt: () => Promise<AsyncIterator<DateTimeOutput>>;
  height: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface StationSubscriptionPayload {
  mutation: MutationType;
  node: Station;
  updatedFields: String[];
  previousValues: StationPreviousValues;
}

export interface StationSubscriptionPayloadPromise
  extends Promise<StationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StationPreviousValuesPromise>() => T;
}

export interface StationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StationPreviousValuesSubscription>() => T;
}

export interface StationPreviousValues {
  id: ID_Output;
  wtId: String;
  name: String;
  lat: Float;
  lng: Float;
}

export interface StationPreviousValuesPromise
  extends Promise<StationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  wtId: () => Promise<String>;
  name: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface StationPreviousValuesSubscription
  extends Promise<AsyncIterator<StationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wtId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Station",
    embedded: false
  },
  {
    name: "Extreme",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
